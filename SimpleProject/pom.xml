<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
	
	<!-- 
		* POM.xml 구조
		
		<project>
			프로젝트의 정보(pom.xml의 버전)
			group Id는 src 아래에 main과 test가 있는데, test는 테스트 코드 작성하는 영역
			main이 실질적으로 개발할때 작업물 넣는 공간
			이 안에 java, resources, webapp이 들어있음 -> 스프링 프로젝트 만들면 기본으로 생성되는 친구들
			java 아래에 com.kh.spring 있는데 com.kh까지를 groupId라고 표현
			top level domain은 세번째 -> 이건 artifactId라고 들어감
			name은 프로젝트 이름이 들어감
			packaging은 만들어진 프로젝트를 가지고 실제 서버에 돌릴 프로그램으로 바꾸는 과정이 필요한데, 실제 돌아가고 있는 서버에 돌려야함(지금처럼 달아서 돌리는게아니라)
			이걸 나중에 내보낼 때 압축해서 내보내야하는데, 자주 본 압축형식은 jar(자바 프로그램을 압축한 확장자 -> 메이븐에 든것도 jar, 외부로 내보내려고 만든형태)
			웹에서 돌릴거라 war, 압축형식을 정하는 부분
			내보낼 때 버전관리를 version 태그로 작성해뒀다
			1.0.0으로 시작해서 기능추가는 가운데, 문제해결은 마지막, 대격변은 첫번째숫자
			내보낼때 버전이 붙어서 나간다
			이 항목들은 메이븐이 관리하는 이 프로젝트에 대한 정보를 기술
			
			그아래 properties 태그가 있음
			<properties>
			<dependencies> : 프로젝트에 라이브러리 추가하려면 여기로 감
			<build>
		</project>
	-->
	
	<modelVersion>4.0.0</modelVersion> 
	<groupId>com.kh</groupId>
	<artifactId>spring</artifactId>
	<name>SimpleProject</name>
	<packaging>war</packaging>
	<version>1.0.0-BUILD-SNAPSHOT</version>
	
	<!-- 
		* properties(속성) : 극단적으로 표현하면 변수, 문서내에서 사용할 값들을 선언하는 태그(변수선언이다 라고 생각)
		사용할 core버전과 동일하게 작성해야하는데 계속 바꾸려면 많이 쓸수록 실수할 확률이 생김
		문서 하단에 계속 사용할 값을 태그로 잡아둔다, 이러면 properties에 선언했으니, 아래영역에서 콘텐트 영역에 값을 쓸 때 EL구문처럼 쓰면 값이 그대로 반영됨
		${org.springframework-version}
		properties 내부의 버전값만 수정하면 스프링이 받아와서 변경해줌
		원래 이건 개발자가 복사해서 넣었겠지? 스프링 버전 한달에 한번씩 쭊쭊 올라가는데 그때마다 어느세월에 하나여
		이런 번거로운 작업을 나중에 개발 끝나고 빌드하고 배포하는 과정까지 전부 모든것을 개발자가 하나하나 하기 어려우니 지금 메이븐 써서 작업중
		그 아래 자주 쓸 바꿀 값을 태그 추가해두고(변수처럼) 아래에서 사용가능
	-->
	<properties>
		<java-version>21</java-version>
		<org.springframework-version>5.3.39</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>
	
	
	<!--
		* dependencies : 이 프로젝트에서 사용할 라이브러리의 정보를 기술하는 영역
		원래라면 라이브러리 추가하려고 할 때 슬랙에가서 선생님이 올려주신거 받아서 옮기고 집어넣었겠지?
		그러지 않고 라이브러리가 제공되는 메이븐 저장소에 가서 groupId, artifactId, version 작성하면 알아서 레포지토리에 받아서 추가해줌
		우리들의 보물창고가 있다 -> 구글 열어서 maven repository 검색 -> https://mvnrepository.com/ 에서 개발에 필요한 프레임워크 다 받아올 수 있음
		gson같은거 쓰고싶은 버전 눌러보면 dependency 보임, 복사해서 붙여넣기 하고 저장하면 알아서 gson을 받아서 프로젝트에 추가해줌
		이렇게 메이븐 레포에서 필요한 라이브러리 복붙해두면 알아서 프로젝트 라이브러리에 추가해준다(메이븐이 해줌)
		옛날에 마이바티스 시작할 때 처음 봤음... 공식문서 처음에 있다, 메이븐을 사용한다면 pom.xml에 다음의 설정을 추가하자. <- 이렇게 되어있음
		직접 jar 파일 추가할수도 있고(이건 우리가 해본거) pom.xml에 추가하는 방식으로도 가능
		메이븐 레포지토리는 개발하면서 많이 들어가는 사이트니까 즐찾추천(보물창고)
		아무튼 이걸 할 때 필요한 라이브러리는 메이븐 레포에서 복사해오면되고 필요없으면 지우고 저장해버리면 끝
		프로젝트에 필요한 라이브러리를 간단히 처리 가능
		build는 메이븐 동작 시 플러그인을 설정하는 부분, 건들면 좋긴 한데 지금은 넘어감
		그래서 원래라면 선생님이랑 같이 바꾸려고 시나리오를 짜셨다는데 이미 바꿔두셔서 ㅎ
	-->
	<dependencies>
	<!-- 기본적으로 Spring Web MVC 할 때 필요한것들이 추가되어있음
	??? 14:23 inject는 테스트코드용, 서블릿도 있고 테스트용 junit 등이 있음 맨 아래로 ㄱㄱ -->
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
				
		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	
		
		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>

		<!-- @Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
				
		<!-- Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
	
		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.7</version>
			<scope>test</scope>
		</dependency>    
		
		<!-- 추가적으로 개발에 필요한 라이브러리들은 직접 세팅 -->
		<!-- DB관련 작업을 위한 라이브러리(ojdbc, mybatis) -->
		<!-- 확인하면서 할거라 package explorer 열어서 확인하면서 작업 -> Maven Dependencies에서 확인 -->
		<!-- Maven repository로 감
		무조건 ojdbc 추가해야함 -> 보통 popular categories에 있음 우리는 알고있으니 ojdbc를 검색
		원래 문서 찾으면서 버전에 맞는건지 확인해야함, 지금 21 쓰고있으니까
		ai도움 받아서 호환성 버전 선택해도 됨
		보편적으로 여기 나왔을 때 usages 항목이 있음, 이게 높을수록 많은 사람이 사용하고 안정적, 검증됨 이라는 의미니까 같이 확인
		지금은 jdk21이라 Ojdbc10 사용해도 될듯? 큰 문제 없을듯 이걸로 해보자(Relocated → com.oracle.database.jdbc » ojdbc11 이것도 있긴함, 다음 버전 나오면 이렇게 해준다)
		그냥 11버전으로 ㄱㄱ
		웬만하면 최신안쓰는게 좋음, 가장 최신은 새로운 시도를 할수도있어서 유효성이 검증되지 않았을 확률이 있음
		여기서도 버전에 Usages를 보고 가장 높은거, 지금은 23.7.0.25.01
		옛날엔 하나하나 테스트했어야 한다네요; 실제 jar파일은 오라클에서 제공해주는데, 메이븐 레포는 각 사이트에 분산된것을 모아놓은곳
		그래들 쓰면 여기서 또 할 수 있음
		아무튼 메이븐 탭에서 소스코드부분 클릭 -> Copied to clipboard!
		아래쪽에 붙여넣고 저장, 프로그레스 확인하면 아까 패키지 익스플로러에 ojdbc11 생긴거 볼 수 있음
		버전 바꾸는건 이아래에 복붙한 버전만 바꿔버리면됨
		오타나도 아프다고 알려줌, 웬만하면 복사한거 그대로 사용
		아무튼 jdbc 추가했당~ 이거 있어야 우리가 DB작업 할 수 있음
		-->
		<!-- 1. ojdbc라이브러리 -->
		<!-- https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc11 -->
		<dependency>
		    <groupId>com.oracle.database.jdbc</groupId>
		    <artifactId>ojdbc11</artifactId>
		    <version>23.7.0.25.01</version>
		</dependency>
		
		<!-- JDBC는 스프링에서 넣는다고 바로 쓸 순 없음 -->
		<!-- 1_2. JDBC를 SPRING에서 사용하기 위해 필요한 라이브러리를 추가해줘야함 -->
		<!-- 다시 메이븐 레포가서 검색 -> spring-jdbc -> Spring JDBC -> 이건 지금 spring 버전이랑 통일시켜야함
		4페이지에 보면 5.3.33 -> dependency 복사해와서 붙여넣고 저장
		근데 이거 좋은 방식이 아님, 스프링 버전 바꿔버리면 여기도 바꿔야한다
		실제 값이 적힌 5.3.33을 수정 -> spring 선언한 property 복사해오기 -> ${org.springframework-version}
		5.3.39로 변경
		-->
		<!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc -->
		<dependency>
		    <groupId>org.springframework</groupId>
		    <artifactId>spring-jdbc</artifactId>
		    <version>${org.springframework-version}</version>
		</dependency>
		
		<!-- 1_3. MyBatis 이건 직접 해보자 마이바티스 공식문서 ㄱㄱ
		??? 14:38 사용할 마이바티스 버전 어디서 확인하는지?
		메이븐 할거면 똑같이 레포에서 마이바티스 검색해서 하면됨
		-->
		<dependency>
		  <groupId>org.mybatis</groupId>
		  <artifactId>mybatis</artifactId>
		  <version>3.5.19</version>
		</dependency>
		
		<!-- jdbc랑 마찬가지로 spring에서 마이바티스를 사용하기 위한 라이브러리가 필요함, 이건 마이바티스에서 제공해주므로
		검색어가 mybatis-spring 이 된다, Boot Starter는 부트용
		두번째 MyBatis Spring으로 선택, 호환성 이슈가 있어서 usage가 높은 1.3.1로 복사해오기 -->
		<!-- 1_4. Spring에서 MyBatis를 사용하기 위한 라이브러리 -->
		<!-- https://mvnrepository.com/artifact/org.mybatis/mybatis-spring -->
		<dependency>
		    <groupId>org.mybatis</groupId>
		    <artifactId>mybatis-spring</artifactId>
		    <version>1.3.1</version>
		</dependency>
		
		<!-- 이걸로 connection pool을 만들어서 쓰고싶음(마이바티스 쓸 때)
		메이븐 레포에서 commons-dbcp 검색(data base connection pool) -> 2.5 이상 쓰든가 1.4 써야함
		commons dbcp 선택(2.5 써도됨, 그이상 써야함, 근데 1.4가 호환성 아주굿)
		-->
		<!-- https://mvnrepository.com/artifact/commons-dbcp/commons-dbcp -->
		<dependency>
		    <groupId>commons-dbcp</groupId>
		    <artifactId>commons-dbcp</artifactId>
		    <version>1.4</version>
		</dependency>
		
		<!-- 사실 5번까지 해야하는데 번거롭고 시간이 아까우니 지금은 여기까지만 하고 선생님께 그때그때 필요할때마다 태그받아서 쓰자 -->
		<!-- 미니프로젝트 진행할 때 총대가 또 한명 있음, 총대 한명이 또 이걸 세팅 다 해줘야함, 프로젝트에서 쓸 라이브러리 추가해둔 pom.xml 작성해서 나머지 사람이 받아서 쓰는 방식
		받아서 그냥 우클릭하고 메이븐 업데이트만 하면 알아서 라이브러리가 추가되니까 이런식으로 작업
		지금 jstl도 포함되어있음(코어라이브러리 쓰려면 있어야함), 지금 써져있는건 호환성 이슈가 있어서 우리가 쓸거 직접 추가해서 사용해보자
		원래 우리가 이 라이브러리를 관리 할 때 lib에 넣어서 했음 -> WEB-INF 아래에 있어서 거기에 넣어서
		근데 지금은 lib가 없음, 만들어줘야함 -> 태그라이브러리 추가
		개인적으로 추가할것은 이렇게 추가해서 사용
		-->
		
		<!-- MemberDTO 작업 전에 라이브러리 추가 -->
		<!-- 2. 자바개발자라면 모두가 사용하는 라이브러리 -->
		<!-- 메이븐 레포에서 받으면 되는데 이번엔 선생님께 받음, 슬랙 수업자료에서 복사해오기 -->
		<dependency>
		    <groupId>org.projectlombok</groupId>
		    <artifactId>lombok</artifactId>
		    <version>1.18.30</version>
		    <scope>provided</scope>
		</dependency>
		<!-- 추가하고 세팅 필요, IDE에 설정하는 거라서 -> 메이븐 설치폴더로 간다 -->
		    
	</dependencies>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <additionalProjectnatures>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                    </additionalProjectnatures>
                    <additionalBuildcommands>
                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
                    </additionalBuildcommands>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>org.test.int1.Main</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
