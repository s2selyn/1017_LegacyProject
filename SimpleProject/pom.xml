<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/maven-v4_0_0.xsd">
	
	<!-- 
		* POM.xml 구조
		
		<project>
			프로젝트의 정보(pom.xml의 버전)
			group Id는 src 아래에 main과 test가 있는데, test는 테스트 코드 작성하는 영역
			main이 실질적으로 개발할때 작업물 넣는 공간
			이 안에 java, resources, webapp이 들어있음 -> 스프링 프로젝트 만들면 기본으로 생성되는 친구들
			java 아래에 com.kh.spring 있는데 com.kh까지를 groupId라고 표현
			top level domain은 세번째 -> 이건 artifactId라고 들어감
			name은 프로젝트 이름이 들어감
			packaging은 만들어진 프로젝트를 가지고 실제 서버에 돌릴 프로그램으로 바꾸는 과정이 필요한데, 실제 돌아가고 있는 서버에 돌려야함(지금처럼 달아서 돌리는게아니라)
			이걸 나중에 내보낼 때 압축해서 내보내야하는데, 자주 본 압축형식은 jar(자바 프로그램을 압축한 확장자 -> 메이븐에 든것도 jar, 외부로 내보내려고 만든형태)
			웹에서 돌릴거라 war, 압축형식을 정하는 부분
			내보낼 때 버전관리를 version 태그로 작성해뒀다
			1.0.0으로 시작해서 기능추가는 가운데, 문제해결은 마지막, 대격변은 첫번째숫자
			내보낼때 버전이 붙어서 나간다
			이 항목들은 메이븐이 관리하는 이 프로젝트에 대한 정보를 기술
			
			그아래 properties 태그가 있음
			<properties>
			<dependencies>
			<build>
		</project>
	-->
	
	<modelVersion>4.0.0</modelVersion> 
	<groupId>com.kh</groupId>
	<artifactId>spring</artifactId>
	<name>SimpleProject</name>
	<packaging>war</packaging>
	<version>1.0.0-BUILD-SNAPSHOT</version>
	
	<!-- 
		* properties(속성) : 극단적으로 표현하면 변수, 문서내에서 사용할 값들을 선언하는 태그(변수선언이다 라고 생각)
		사용할 core버전과 동일하게 작성해야하는데 계속 바꾸려면 많이 쓸수록 실수할 확률이 생김
		문서 하단에 계속 사용할 값을 태그로 잡아둔다, 이러면 properties에 선언했으니, 아래영역에서 콘텐트 영역에 값을 쓸 때 EL구문처럼 쓰면 값이 그대로 반영됨
		${org.springframework-version}
		properties 내부의 버전값만 수정하면 스프링이 받아와서 변경해줌
		원래 이건 개발자가 복사해서 넣었겠지? 스프링 버전 한달에 한번씩 쭊쭊 올라가는데 그때마다 어느세월에 하나여
		이런 번거로운 작업을 나중에 개발 끝나고 빌드하고 배포하는 과정까지 전부 모든것을 개발자가 하나하나 하기 어려우니 지금 메이븐 써서 작업중
		그 아래 자주 쓸 바꿀 값을 태그 추가해두고(변수처럼) 아래에서 사용가능
	-->
	<properties>
		<java-version>21</java-version>
		<org.springframework-version>5.3.33</org.springframework-version>
		<org.aspectj-version>1.6.10</org.aspectj-version>
		<org.slf4j-version>1.6.6</org.slf4j-version>
	</properties>
	
	
	<!--
		* dependencies : 이 프로젝트에서 사용할 라이브러리의 정보를 기술하는 영역
		원래라면 라이브러리 추가하려고 할 때 슬랙에가서 선생님이 올려주신거 받아서 옮기고 집어넣었겠지?
		그러지 않고 라이브러리가 제공되는 메이븐 저장소에 가서 groupId, artifactId, version 작성하면 알아서 레포지토리에 받아서 추가해줌
		우리들의 보물창고가 있다 -> 구글 열어서 maven repository 검색 -> https://mvnrepository.com/ 에서 개발에 필요한 프레임워크 다 받아올 수 있음
		gson같은거 쓰고싶은 버전 눌러보면 dependency 보임, 복사해서 붙여넣기 하고 저장하면 알아서 gson을 받아서 프로젝트에 추가해줌
		이렇게 메이븐 레포에서 필요한 라이브러리 복붙해두면 알아서 프로젝트 라이브러리에 추가해준다(메이븐이 해줌)
		옛날에 마이바티스 시작할 때 처음 봤음... 공식문서 처음에 있다, 메이븐을 사용한다면 pom.xml에 다음의 설정을 추가하자. <- 이렇게 되어있음
		직접 jar 파일 추가할수도 있고(이건 우리가 해본거) pom.xml에 추가하는 방식으로도 가능
		메이븐 레포지토리는 개발하면서 많이 들어가는 사이트니까 즐찾추천(보물창고)
		아무튼 이걸 할 때 필요한 라이브러리는 메이븐 레포에서 복사해오면되고 필요없으면 지우고 저장해버리면 끝
		프로젝트에 필요한 라이브러리를 간단히 처리 가능
		build는 메이븐 동작 시 플러그인을 설정하는 부분, 건들면 좋긴 한데 지금은 넘어감
		그래서 원래라면 선생님이랑 같이 바꾸려고 시나리오를 짜셨다는데 이미 바꿔두셔서 ㅎ
	-->
	<dependencies>
		<!-- Spring -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>${org.springframework-version}</version>
			<exclusions>
				<!-- Exclude Commons Logging in favor of SLF4j -->
				<exclusion>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
				 </exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${org.springframework-version}</version>
		</dependency>
				
		<!-- AspectJ -->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspectj-version}</version>
		</dependency>	
		
		<!-- Logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${org.slf4j-version}</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-log4j12</artifactId>
			<version>${org.slf4j-version}</version>
			<scope>runtime</scope>
		</dependency>
		
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
			<exclusions>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
			</exclusions>
			<scope>runtime</scope>
		</dependency>

		<!-- @Inject -->
		<dependency>
			<groupId>javax.inject</groupId>
			<artifactId>javax.inject</artifactId>
			<version>1</version>
		</dependency>
				
		<!-- Servlet -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>2.1</version>
			<scope>provided</scope>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>jstl</artifactId>
			<version>1.2</version>
		</dependency>
	
		<!-- Test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.7</version>
			<scope>test</scope>
		</dependency>    
		    
	</dependencies>
    <build>
        <plugins>
            <plugin>
                <artifactId>maven-eclipse-plugin</artifactId>
                <version>2.9</version>
                <configuration>
                    <additionalProjectnatures>
                        <projectnature>org.springframework.ide.eclipse.core.springnature</projectnature>
                    </additionalProjectnatures>
                    <additionalBuildcommands>
                        <buildcommand>org.springframework.ide.eclipse.core.springbuilder</buildcommand>
                    </additionalBuildcommands>
                    <downloadSources>true</downloadSources>
                    <downloadJavadocs>true</downloadJavadocs>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.5.1</version>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                    <compilerArgument>-Xlint:all</compilerArgument>
                    <showWarnings>true</showWarnings>
                    <showDeprecation>true</showDeprecation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>1.2.1</version>
                <configuration>
                    <mainClass>org.test.int1.Main</mainClass>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
