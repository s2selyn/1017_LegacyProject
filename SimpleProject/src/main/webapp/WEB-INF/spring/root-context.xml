<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	
	<!-- Spring이 생명주기를 관리하는 객체 == Bean
	VO랑 비슷, DTO랑 좀 더 비슷
	Bean을 어떻게 만들어야하는지 명세가 정해져있음
	대문자시작, getter/setter, 기본생성자 넣으라는 그런것들
	실제로는 개발자가 알아서 자유롭지만 누가 잡아간다거나 작동이 안하진 않음
	모든 개발자들은 이런 상황에서 규칙이 있다면 반드시 지켜준다, standard라고 표현, 안지키는 사람 있긴하지만 한가하면 다 지키려고 해
	시간이 넉넉하면 다 지키지, 못지키면 바쁜거죠 
	-->
	<!--
		* root-context.xml
		서버가 구동되면서 세팅되어야하는 (Bean으로 등록)내용들을 (작성DB접속, 트랜잭션처리, 외부모듈연결...)
		왜냐하면 서버 켜지면 web.xml 거쳐서 바로 여기에 오니까
		서버 구동과 동시에 web.xml파일을 거쳐서 로딩되는 문서 == 서버가 켜지기 전에 로딩되니까 preloading
		스프링이 관리할 bean들을 추가할거임, 아까 라이브러리에서 본 BasicDataSource를 등록해야함
		제일 쉬운 방법은 애노테이션 다는건데 너무쉬우니까 부트가서 하고
		회사가서 구닥다리 코드 볼 수 있으니 어떻게 했는지 알아야함
		
		bean 태그로 추가하면됨
		어떤 클래스를 등록할건지 속성 작성
		이 클래스를 식별할 수 있는 풀클래스명으로 작성, 프레임워크의 장점은 오타체크 바로해줌
		id 속성 추가, bean들을 식별하는 용도
		우리가 서비스에서 매번 sqlSession 반납작업했음, 객체 죽이는 생명주기 관리였다, 이제 스프링이 해야함
		-> destroy-method 속성으로 close 메소드 호출하게
		값들이 setter 호출을 통해 인자값 전달해서 driverClassName 필드 등에 값이 들어가도록 해야함
		bean 안에 쓸 수 있는 태그도 몇 없음
	-->
	
	<bean class="org.apache.commons.dbcp.BasicDataSource"
		  id="dataSource" destroy-method="close">
		  
	<property
	
	</bean>
		
</beans>
