package com.kh.spring.member.model.service;

import com.kh.spring.member.model.dto.MemberDTO;

public interface MemberService {
	
	// 추상메소드, default메소드, static메소드를 가질 수 있음
	// 계약서, 명세 이런 느낌이라면 추상메소드가 가장 중요
	// 추상메소드란? 구현하지 않은 메소드, 메소드 바디를 안 쓴 거겠지?
	
	// 로그인 ==> 반환타입 + 매개변수는 생각해둘 수 있음
	// 처음 구현한다면 상상 못했겠지? 이미 해봤으니까 알수있음, 마이바티스 쓸거고 조회에 성공하면 세션스코프에 담아둘것이야
	// 그럼 최소 다섯개의 값이 들어온다, 테이블의 컬럼이 다섯개니까
	// 서비스에서 컨트롤러로 돌아갈 때 다섯개를 따로 돌릴순없음 리턴은 하나뿐
	// DAO도 로그인에 성공했다면 결과를 하나의 객체로 받아온다, 로그인은 id를 조건으로 두니까 selectOne로 조회할거고, 결과가 하나니까 VO/DTO로 받아올것임
	// 그러므로 interface에서 반환타입이랑 매개변수를 생각해둘 수 있음
	MemberDTO login(MemberDTO member);
	
	// 회원가입
	// 나중에 반환타입은? insert니까 성공하면 1행 insert 될테니 int로 할까?
	// 경우의 수가 많음, 어떤 기술을 사용해서 영속성 작업을 하느냐에 따라 나중에 반환되는 것이 달라짐
	// MyBatis : 1. 정수값을 반환함(-> 컨트롤러에서 성공실패 페이지로 보내겠다는 뜻)
	// 			 2. 아무 값도 반환하지 않음(void) ==> 예외처리를 빡빡하게 하겠음
	// result가 0이면 억지로 예외를 발생시켜서 예외처리를 따르게 돌림
	// 예외가 발생하지 않으면 무조건 성공했다는 의미로 성공페이지로 보내기
	// Hibernate : 가입된 회원의 정보를 반환해줌 / 실패시 null
	void signUp(MemberDTO member);
	// column 5개인데 SYSDATE넣을거고 email 필수가 아니므로 3개는 받아야함, 어디에 담아서 가공해오나?
	// 일반적으로 생각했을 때 DTO
	// 커맨드 객체 방식 배웠으니까 앞에서 객체로 넘겨준 값 그대로 쓸 수 있을 듯
	
	// 정보수정
	void update(MemberDTO member);
	
	// 탈퇴
	void delete(MemberDTO member);
	
	// 아무튼 서비스를 이번에 인터페이스로 만들어봤다. 이걸로 작업을 처리하게 할 수는 없음
	// 이걸로 뭐함? 왜만들어? 어디다가 써? 다형성을 적용하려고! 부모객체(타입)로 사용하기 위해서, 타입 쓰려고, 타입이 필요하니까
	// Controller에서 MemberService 타입을 선언해두고 왔다, 이걸 쓰고싶다는것
	// 서비스가 핵심파트임, 이 안에 작업을 막 해두면 컨트롤러 입장에서는 서비스의 메소드를 호출해서 쓰겠지
	// 컨트롤러에서는 서비스의 메소드를 호출해서 쓴다, 맨날 하던것
	// 이 상태를 의존관계가 된거라고 표현, 컨트롤러는 서비스를 의존하고 있다
	// 어느날 서비스를 바꿔야하는 상황이 왔다면? 2가지 정도가 있을 수 있는데 첫번째는 메소드가 없어지는 경우
	// 컨트롤러가 의존하고 있었으니까 메소드가 없어지면 아파잉 의존적이니까
	// 가져다 쓰고있으니 당연히 없어지거나 고쳐지면 문제가 생김
	// 두번째 경우는 서비스가 갈아엎어지는 경우, 서비스를 쓰지 않고 서비스2를 만들어버려서 쓰자는거지
	// 제품이 일회용이아니라 틀만 두고 DB접속만 바꿔서 커마해서 납품한다고 쳐
	// DBMS 바뀌니까 서비스클래스 갈아야겠지, 그럼 컨트롤러에서 또 생성될 객체를 바꿔줘야함, 타입도 바뀔거고
	// 그럼 변경전의 서비스 안에 있던 메소드가 없으니 새 서비스에 같은 이름의 메소드를 만들어주든지 컨트롤러가 새 서비스의 다른 메소드 호출하도록 바꾸든지 해야함
	// 좋지 않은 상황, 한군데만 고쳤는데 다른곳에 고쳐야할게 생기면 별로야
	// 이 의존관계를 낮출 수 있는 방법이 없을까? 결합도가 높아버림
	// 컨트롤러 입장에서 서비스를 너무 잘 알고 있으니까 문제가 되는거고, 서비스만 고쳐도 컨트롤러도 고쳐야하는 영향이 생긴것
	// 서로 잘 모르게 만들어야겠다! -> 여기서 시작
	// 그러면 자료형을 숨겨야겠다가 시작, 실제 형태를 사용하는 쪽에서는 진짜 자기가 쓰는 친구의 자료형을 모르게해야지
	// 서비스는 두고 클래스 추가
	
}
